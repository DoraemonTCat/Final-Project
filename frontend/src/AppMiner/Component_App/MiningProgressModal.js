import React, { useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTimes, faPause, faPlay, faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';

const MiningProgressModal = ({ 
  currentBatch, 
  totalBatches, 
  successCount,
  failCount = 0,
  remainingTime,
  isPaused = false,
  onPause,
  onResume,
  onCancel,
  currentUsers = [] // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏∏‡∏î
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  
  const progress = (currentBatch / totalBatches) * 100;
  const remainingMinutes = Math.floor(remainingTime / 60000);
  const remainingSeconds = Math.floor((remainingTime % 60000) / 1000);

  return (
    <div className="mining-progress-overlay">
      <div className="mining-progress-modal">
        {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î */}
        <button 
          className="progress-close-btn"
          onClick={onCancel}
          title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î"
        >
          <FontAwesomeIcon icon={faTimes} />
        </button>

        <div className="mining-progress-header">
          <h2>‚õèÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
          <p style={{ color: '#718096', margin: 0 }}>
            {isPaused ? '‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß' : 'üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...'}
          </p>
        </div>
        
        <div className="progress-bar-container">
          <div 
            className="progress-bar-fill" 
            style={{ 
              width: `${progress}%`,
              opacity: isPaused ? 0.6 : 1
            }}
          >
            <span id="progress-text">{Math.round(progress)}%</span>
          </div>
        </div>
        
        <div className="progress-stats">
          <div className="progress-stat">
            <div className="progress-stat-value">{currentBatch}</div>
            <div className="progress-stat-label">‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>
          </div>
          <div className="progress-stat">
            <div className="progress-stat-value">{totalBatches}</div>
            <div className="progress-stat-label">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
          </div>
          <div className="progress-stat">
            <div className="progress-stat-value" style={{ color: '#48bb78' }}>
              {successCount}
            </div>
            <div className="progress-stat-label">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</div>
          </div>
          {failCount > 0 && (
            <div className="progress-stat">
              <div className="progress-stat-value" style={{ color: '#fc8181' }}>
                {failCount}
              </div>
              <div className="progress-stat-label">‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</div>
            </div>
          )}
        </div>
        
        {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
        <div className="progress-controls">
          {isPaused ? (
            <button 
              className="control-btn resume-btn"
              onClick={onResume}
            >
              <FontAwesomeIcon icon={faPlay} />
              ‡∏ó‡∏≥‡∏ï‡πà‡∏≠
            </button>
          ) : (
            <button 
              className="control-btn pause-btn"
              onClick={onPause}
            >
              <FontAwesomeIcon icon={faPause} />
              ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            </button>
          )}
          
          <button 
            className="control-btn cancel-btn"
            onClick={() => {
              if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ')) {
                onCancel();
              }
            }}
          >
            <FontAwesomeIcon icon={faTimes} />
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        </div>

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ */}
        {remainingTime > 0 && !isPaused && (
          <div className="remaining-time-info">
            ‚è±Ô∏è ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å <strong>
              {remainingMinutes}:{remainingSeconds.toString().padStart(2, '0')}
            </strong>
          </div>
        )}

        {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ) */}
        <div className="progress-details">
          <button 
            className="details-toggle"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            <span>
              {isExpanded ? '‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' : '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}
            </span>
            <FontAwesomeIcon icon={isExpanded ? faChevronUp : faChevronDown} />
          </button>
          
          {isExpanded && (
            <div className="details-content">
              <h4>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ</h4>
              <div className="detail-item">
                <span className="detail-label">üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤:</span>
                <span className="detail-value">{currentBatch} / {totalBatches} ‡∏£‡∏≠‡∏ö</span>
              </div>
              <div className="detail-item">
                <span className="detail-label">‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</span>
                <span className="detail-value">{successCount} ‡∏Ñ‡∏ô</span>
              </div>
              {failCount > 0 && (
                <div className="detail-item">
                  <span className="detail-label">‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</span>
                  <span className="detail-value">{failCount} ‡∏Ñ‡∏ô</span>
                </div>
              )}
              
              {currentUsers.length > 0 && (
                <div className="current-users-section">
                  <h5>üë• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ:</h5>
                  <div className="current-users-list">
                    {currentUsers.slice(0, 5).map((user, index) => (
                      <div key={index} className="user-item">
                        <span className="user-icon">üë§</span>
                        <span className="user-name">{user.name || `User ${index + 1}`}</span>
                      </div>
                    ))}
                    {currentUsers.length > 5 && (
                      <div className="user-item more">
                        ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {currentUsers.length - 5} ‡∏Ñ‡∏ô...
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MiningProgressModal;