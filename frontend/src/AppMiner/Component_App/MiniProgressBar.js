// frontend/src/AppMiner/Component_App/MiniProgressBar.js
import React, { useState, useEffect } from 'react';

const MiniProgressBar = () => {
  const [progress, setProgress] = useState(null);
  const [isVisible, setIsVisible] = useState(false);
  const [remainingTime, setRemainingTime] = useState(null);
  const [nextBatchTime, setNextBatchTime] = useState(null);

  useEffect(() => {
    // ‡πÄ‡∏ä‡πá‡∏Ñ progress ‡∏à‡∏≤‡∏Å localStorage ‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const checkProgress = () => {
      const savedProgress = localStorage.getItem('miningProgress');
      
      if (savedProgress) {
        try {
          const progressData = JSON.parse(savedProgress);
          const percentage = (progressData.currentBatch / progressData.totalBatches) * 100;
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
          const now = Date.now();
          const elapsedTime = now - progressData.startTime;
          const batchesCompleted = progressData.currentBatch;
          const batchesRemaining = progressData.totalBatches - batchesCompleted;
          
          let estimatedRemainingMs = 0;
          
          if (batchesRemaining > 0) {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
            // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö = (‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ) / (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)
            const avgTimePerBatch = batchesCompleted > 0 
              ? elapsedTime / batchesCompleted 
              : progressData.delayMinutes * 60 * 1000;
            
            estimatedRemainingMs = avgTimePerBatch * batchesRemaining;
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö
            if (batchesRemaining > 0) {
              estimatedRemainingMs += (batchesRemaining - 1) * progressData.delayMinutes * 60 * 1000;
            }
          }
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
          let nextBatch = null;
          if (batchesRemaining > 0 && progressData.lastBatchCompletedAt) {
            const timeSinceLastBatch = now - progressData.lastBatchCompletedAt;
            const delayMs = progressData.delayMinutes * 60 * 1000;
            const timeUntilNextBatch = Math.max(0, delayMs - timeSinceLastBatch);
            
            if (timeUntilNextBatch > 0) {
              nextBatch = timeUntilNextBatch;
            }
          }
          
          setProgress({
            ...progressData,
            percentage: Math.round(percentage)
          });
          setRemainingTime(estimatedRemainingMs);
          setNextBatchTime(nextBatch);
          setIsVisible(true);
        } catch (error) {
          console.error('Error parsing progress:', error);
          localStorage.removeItem('miningProgress');
          setIsVisible(false);
        }
      } else {
        setIsVisible(false);
      }
    };

    checkProgress();
    const interval = setInterval(checkProgress, 1000);

    return () => clearInterval(interval);
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  const formatTime = (milliseconds) => {
    if (!milliseconds || milliseconds <= 0) return '0 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ';
    
    const totalSeconds = Math.floor(milliseconds / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    
    const parts = [];
    if (hours > 0) parts.push(`${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
    if (minutes > 0) parts.push(`${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
    if (seconds > 0 || parts.length === 0) parts.push(`${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
    
    return parts.join(' ');
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö countdown)
  const formatCountdown = (milliseconds) => {
    if (!milliseconds || milliseconds <= 0) return '00:00';
    
    const totalSeconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  };

  if (!isVisible || !progress) return null;

  return (
    <div className="mini-progress-container">
      <div className="mini-progress-content">
        <div className="mini-progress-header">
          <span className="mini-progress-icon">‚õèÔ∏è</span>
          <span className="mini-progress-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏∏‡∏î...</span>
          <span className="mini-progress-percentage">{progress.percentage}%</span>
        </div>
        
        <div className="mini-progress-bar">
          <div 
            className="mini-progress-fill"
            style={{ width: `${progress.percentage}%` }}
          />
        </div>
        
        <div className="mini-progress-stats">
          <span className="mini-stat">
            üì¶ ‡∏£‡∏≠‡∏ö {progress.currentBatch}/{progress.totalBatches}
          </span>
          <span className="mini-stat">
            ‚úÖ {progress.successCount}
          </span>
          {progress.failCount > 0 && (
            <span className="mini-stat error">
              ‚ùå {progress.failCount}
            </span>
          )}
        </div>
        
        {/* ‚úÖ Countdown ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ */}
        {nextBatchTime > 0 && progress.currentBatch < progress.totalBatches && (
          <div className="mini-progress-countdown">
            <span className="countdown-label">‚è≥ ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å:</span>
            <span className="countdown-value">{formatCountdown(nextBatchTime)}</span>
          </div>
        )}
      </div>
    </div>
  );
};

export default MiniProgressBar;