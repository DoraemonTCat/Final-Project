import React, { useState, useEffect } from 'react';
import '../CSS/ScheduleDashboard.css';
import Sidebar from "./Sidebar";

function ScheduleDashboard() {
  const [selectedPage, setSelectedPage] = useState('');
  const [schedules, setSchedules] = useState([]);
  const [activeSchedules, setActiveSchedules] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedSchedule, setSelectedSchedule] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);

  // üî• ‡∏Å‡∏•‡∏∏‡πà‡∏° Default IDs
  const DEFAULT_GROUP_IDS = ['default_1', 'default_2', 'default_3'];

  useEffect(() => {
    const savedPage = localStorage.getItem("selectedPage");
    if (savedPage) {
      setSelectedPage(savedPage);
      loadSchedules(savedPage);
      loadActiveSchedules(savedPage);
    }
  }, []);

  const loadActiveSchedules = async (pageId) => {
    try {
      const response = await fetch(`http://localhost:8000/active-schedules/${pageId}`);
      if (!response.ok) throw new Error('Failed to load active schedules');
      const data = await response.json();
      const activeIds = data.active_schedules.map(s => s.id);
      setActiveSchedules(activeIds);
    } catch (error) {
      console.error('Error loading active schedules:', error);
    }
  };

  const loadSchedules = (pageId) => {
    const key = `miningSchedules_${pageId}`;
    const savedSchedules = JSON.parse(localStorage.getItem(key) || '[]');

    // üî• ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à‡∏ô‡∏µ‡πâ (‡∏£‡∏ß‡∏° default groups)
    const groupKey = `customerGroups_${pageId}`;
    const userGroups = JSON.parse(localStorage.getItem(groupKey) || '[]');
    
    // üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ç‡∏≠‡∏á group IDs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° default)
    const userGroupIds = userGroups.map(g => g.id);
    const allGroupIds = [...DEFAULT_GROUP_IDS, ...userGroupIds];

    // üî• filter schedule ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà (‡∏£‡∏ß‡∏° default groups)
    const filteredSchedules = savedSchedules.filter(sch =>
      sch.groups?.some(gid => allGroupIds.includes(gid))
    );

    // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö schedule (‡∏£‡∏ß‡∏° default groups)
    const schedulesWithNames = filteredSchedules.map(schedule => {
      const groupNames = schedule.groups.map(groupId => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô default group ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (groupId === 'default_1') return '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏´‡∏≤‡∏¢';
        if (groupId === 'default_2') return '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏´‡∏≤‡∏¢‡∏ô‡∏≤‡∏ô';
        if (groupId === 'default_3') return '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏´‡∏≤‡∏¢‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏Å';
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà default ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏à‡∏≤‡∏Å user groups
        const userGroup = userGroups.find(g => g.id === groupId);
        return userGroup?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      });

      return {
        ...schedule,
        groupNames
      };
    });

    setSchedules(schedulesWithNames);
  };

  const refreshStatus = async () => {
    setRefreshing(true);
    try {
      loadSchedules(selectedPage);
      await loadActiveSchedules(selectedPage);
      alert("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error('Error refreshing status:', error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä");
    } finally {
      setRefreshing(false);
    }
  };

  const getScheduleStatus = (schedule) => {
    const isActive = activeSchedules.includes(schedule.id);

    if (schedule.type === 'immediate') return '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß';
    if (schedule.type === 'user-inactive') return isActive ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß';
    if (schedule.type === 'scheduled') {
      const scheduleTime = new Date(`${schedule.date}T${schedule.time}`);
      if (scheduleTime > new Date()) return isActive ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß';
      return '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß';
    }
    return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
  };

  const getStatusColor = (status) => {
    switch (status) {
      case '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß': return '#48bb78';
      case '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô': return '#4299e1';
      case '‡∏£‡∏≠‡∏™‡πà‡∏á': return '#ed8936';
      case '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß': return '#e53e3e';
      default: return '#718096';
    }
  };

  const toggleScheduleStatus = async (schedule) => {
    const status = getScheduleStatus(schedule);

    try {
      if (status === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô') {
        const response = await fetch('http://localhost:8000/schedule/deactivate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            page_id: selectedPage,
            schedule_id: schedule.id
          })
        });

        if (!response.ok) throw new Error('Failed to deactivate');
        alert("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        const response = await fetch('http://localhost:8000/schedule/activate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            page_id: selectedPage,
            schedule: {
              ...schedule,
              pageId: selectedPage
            }
          })
        });

        if (!response.ok) throw new Error('Failed to activate');
        alert("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      }

      await loadActiveSchedules(selectedPage);

    } catch (error) {
      console.error('Error toggling schedule:', error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
    }
  };

  const viewScheduleDetails = (schedule) => {
    setSelectedSchedule(schedule);
    setShowDetailModal(true);
  };

  const getScheduleDescription = (schedule) => {
    if (schedule.type === 'immediate') return '‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ';
    if (schedule.type === 'scheduled') return `${new Date(schedule.date).toLocaleDateString('th-TH')} ${schedule.time}`;
    if (schedule.type === 'user-inactive') {
      return `${schedule.inactivityPeriod} ${
        schedule.inactivityUnit === 'minutes' ? '‡∏ô‡∏≤‡∏ó‡∏µ' :
        schedule.inactivityUnit === 'hours' ? '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á' :
        schedule.inactivityUnit === 'days' ? '‡∏ß‡∏±‡∏ô' :
        schedule.inactivityUnit === 'weeks' ? '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå' : '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'
      }`;
    }
    return '-';
  };

  const goToMinerGroup = () => {
    window.location.href = '/MinerGroup';
  };

  const goBack = () => {
    window.location.href = '/MinerGroup';
  };

  // üî• ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° default ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isDefaultGroup = (groupIds) => {
    return groupIds.some(id => DEFAULT_GROUP_IDS.includes(id));
  };

  return (
    <div className="app-container">
      <Sidebar />

      <div className="dashboard-container">
        <div className="dashboard-header">
          <h1 className="dashboard-title">
            <span className="title-icon">üìä</span>
            Dashboard ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          </h1>
          <button 
            onClick={refreshStatus}
            disabled={refreshing}
            className="refresh-btn"
          >
            {refreshing ? '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä...' : 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'}
          </button>
        </div>
        
        <div className="stats-grid">
          <div className="stat-card">
            <div className="stat-icon">üìÖ</div>
            <div className="stat-info">
              <div className="stat-value">{schedules.length}</div>
              <div className="stat-label">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚úÖ</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß').length}
              </div>
              <div className="stat-label">‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚è≥</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô').length}
              </div>
              <div className="stat-label">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚è∏Ô∏è</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß').length}
              </div>
              <div className="stat-label">‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß</div>
            </div>
          </div>
        </div>

        <div className="schedules-table">
          <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤</h2>
          {schedules.length === 0 ? (
            <div className="empty-table">
              <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏à‡∏ô‡∏µ‡πâ</p>
              <button onClick={goToMinerGroup} className="create-link">
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          ) : (
            <table>
              <thead>
                <tr>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°</th>
                  <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                  <th>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {schedules.map((schedule, index) => {
                  const status = getScheduleStatus(schedule);
                  const isDefault = isDefaultGroup(schedule.groups || []);
                  
                  return (
                    <tr key={schedule.id} className={isDefault ? 'default-schedule-row' : ''}>
                      <td>
                        <div className="group-names-cell">
                          {schedule.groupNames?.join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                          {isDefault && (
                            <span className="default-badge-small">‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</span>
                          )}
                        </div>
                      </td>
                      <td>
                        {schedule.type === 'immediate' && '‚ö° ‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'}
                        {schedule.type === 'scheduled' && 'üìÖ ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤'}
                        {schedule.type === 'user-inactive' && 'üï∞Ô∏è User ‡∏´‡∏≤‡∏¢'}
                      </td>
                      <td>{getScheduleDescription(schedule)}</td>
                      <td>{schedule.messages?.length || 0}</td>
                      <td>
                        <span 
                          className="status-badge"
                          style={{ backgroundColor: getStatusColor(status) }}
                        >
                          {status}
                        </span>
                      </td>
                      <td>
                        <button 
                          className="action-btn view-btn"
                          onClick={() => viewScheduleDetails(schedule)}
                        >
                          üëÅÔ∏è ‡∏î‡∏π
                        </button>
                        {status !== '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß' && (
                          <button 
                            className="action-btn toggle-btn"
                            onClick={() => toggleScheduleStatus(schedule)}
                          >
                            {status === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' ? '‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î' : '‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°'}
                          </button>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          )}
        </div>

        <button onClick={goBack} className="back-link">
          ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
        </button>
      </div>

      {/* Modal ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
      {showDetailModal && selectedSchedule && (
        <div className="modal-overlay" onClick={() => setShowDetailModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤</h3>
              <button className="modal-close" onClick={() => setShowDetailModal(false)}>‚úñ</button>
            </div>
            
            <div className="modal-body">
              <div className="detail-section">
                <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</h4>
                <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {
                  selectedSchedule.type === 'immediate' ? '‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ' :
                  selectedSchedule.type === 'scheduled' ? '‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤' : 'User ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ'
                }</p>
                <p><strong>‡∏Å‡∏•‡∏∏‡πà‡∏°:</strong> {selectedSchedule.groupNames?.join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                  {isDefaultGroup(selectedSchedule.groups || []) && (
                    <span className="default-badge-small" style={{ marginLeft: '8px' }}>‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</span>
                  )}
                </p>
                <p><strong>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:</strong> {getScheduleDescription(selectedSchedule)}</p>
                {selectedSchedule.repeat && selectedSchedule.repeat.type !== 'once' && (
                  <p><strong>‡∏ó‡∏≥‡∏ã‡πâ‡∏≥:</strong> {
                    selectedSchedule.repeat.type === 'daily' ? '‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô' :
                    selectedSchedule.repeat.type === 'weekly' ? '‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå' : '‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'
                  }</p>
                )}
              </div>

              <div className="detail-section">
                <h4>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ({selectedSchedule.messages?.length || 0})</h4>
                <div className="messages-list">
                  {selectedSchedule.messages?.map((msg, idx) => (
                    <div key={idx} className="message-item">
                      <span className="message-number">{idx + 1}.</span>
                      <span className="message-type">
                        {msg.type === 'text' ? 'üí¨' : msg.type === 'image' ? 'üñºÔ∏è' : 'üìπ'}
                      </span>
                      <span className="message-content">
                        {msg.type === 'text' ? msg.content : `[${msg.type.toUpperCase()}] ${msg.content}`}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="detail-section">
                <h4>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h4>
                <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</strong> {getScheduleStatus(selectedSchedule)}</p>
                <p><strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:</strong> {new Date(selectedSchedule.createdAt).toLocaleString('th-TH')}</p>
                {selectedSchedule.updatedAt && (
                  <p><strong>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</strong> {new Date(selectedSchedule.updatedAt).toLocaleString('th-TH')}</p>
                )}
              </div>
            </div>

            <div className="modal-footer">
              <button className="modal-btn" onClick={() => setShowDetailModal(false)}>‡∏õ‡∏¥‡∏î</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default ScheduleDashboard;