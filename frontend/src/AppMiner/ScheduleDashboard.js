import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../CSS/ScheduleDashboard.css';
import Sidebar from "./Sidebar";

function ScheduleDashboard() {
  const [selectedPage, setSelectedPage] = useState('');
  const [schedules, setSchedules] = useState([]);
  const [sentLogs, setSentLogs] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [activeSchedules, setActiveSchedules] = useState([]);

  useEffect(() => {
    const savedPage = localStorage.getItem("selectedPage");
    if (savedPage) {
      setSelectedPage(savedPage);
      loadSchedules(savedPage);
    }
  }, []);

  // Listen for page changes from Sidebar
  useEffect(() => {
    const handlePageChange = (event) => {
      const pageId = event.detail.pageId;
      setSelectedPage(pageId);
      loadSchedules(pageId);
    };

    window.addEventListener('pageChanged', handlePageChange);
    
    return () => {
      window.removeEventListener('pageChanged', handlePageChange);
    };
  }, []);

  const loadSchedules = (pageId) => {
    const key = `miningSchedules_${pageId}`;
    const savedSchedules = JSON.parse(localStorage.getItem(key) || '[]');
    setSchedules(savedSchedules);
    
    // ‡πÇ‡∏´‡∏•‡∏î active schedules
    const activeKey = `activeSchedules_${pageId}`;
    const activeSchedulesList = JSON.parse(localStorage.getItem(activeKey) || '[]');
    setActiveSchedules(activeSchedulesList);
  };

  const refreshStatus = async () => {
    setRefreshing(true);
    
    try {
      // .‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á status
      // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ simulate delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Reload schedules
      loadSchedules(selectedPage);
      
      alert("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error('Error refreshing status:', error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä");
    } finally {
      setRefreshing(false);
    }
  };

  const getScheduleStatus = (schedule) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ schedule ‡∏ô‡∏µ‡πâ active ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isActive = activeSchedules.some(id => id === schedule.id);
    
    if (schedule.type === 'immediate') return '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
    if (schedule.type === 'user-inactive') return isActive ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß';
    if (schedule.type === 'scheduled') {
      const scheduleTime = new Date(`${schedule.date}T${schedule.time}`);
      if (scheduleTime > new Date()) return '‡∏£‡∏≠‡∏™‡πà‡∏á';
      return isActive ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
    }
    return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
  };

  const getStatusColor = (status) => {
    switch (status) {
      case '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß': return '#48bb78';
      case '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô': return '#4299e1';
      case '‡∏£‡∏≠‡∏™‡πà‡∏á': return '#ed8936';
      case '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß': return '#e53e3e';
      default: return '#718096';
    }
  };

  const toggleScheduleStatus = async (schedule) => {
    const status = getScheduleStatus(schedule);
    
    try {
      if (status === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô') {
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        const response = await fetch('http://localhost:8000/schedule/deactivate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            page_id: selectedPage,
            schedule_id: schedule.id
          })
        });

        if (!response.ok) throw new Error('Failed to deactivate');
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó active schedules
        const newActiveSchedules = activeSchedules.filter(id => id !== schedule.id);
        setActiveSchedules(newActiveSchedules);
        localStorage.setItem(`activeSchedules_${selectedPage}`, JSON.stringify(newActiveSchedules));
        
        alert("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        const response = await fetch('http://localhost:8000/schedule/activate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            page_id: selectedPage,
            schedule: schedule
          })
        });

        if (!response.ok) throw new Error('Failed to activate');
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó active schedules
        const newActiveSchedules = [...activeSchedules, schedule.id];
        setActiveSchedules(newActiveSchedules);
        localStorage.setItem(`activeSchedules_${selectedPage}`, JSON.stringify(newActiveSchedules));
        
        alert("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      }
      
      // Reload schedules
      loadSchedules(selectedPage);
      
    } catch (error) {
      console.error('Error toggling schedule:', error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
    }
  };

  const viewScheduleDetails = (schedule) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const details = `
üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤

‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${
      schedule.type === 'immediate' ? '‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ' :
      schedule.type === 'scheduled' ? '‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤' : 'User ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ'
    }

‡∏Å‡∏•‡∏∏‡πà‡∏°: ${schedule.groupNames?.join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ${
      schedule.type === 'user-inactive' ? 
        `‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ${schedule.inactivityPeriod} ${schedule.inactivityUnit}` :
      schedule.type === 'scheduled' ? 
        `${schedule.date} ${schedule.time}` :
        '-'
    }

‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${schedule.messages?.length || 0}

‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:
${schedule.messages?.map((msg, idx) => 
  `${idx + 1}. ${msg.type === 'text' ? msg.content : `[${msg.type.toUpperCase()}] ${msg.content}`}`
).join('\n') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'}

‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getScheduleStatus(schedule)}
    `;
    
    alert(details);
  };

  return (
    <div className="app-container">
      <Sidebar />

      <div className="dashboard-container">
        <div className="dashboard-header">
          <h1 className="dashboard-title">
            <span className="title-icon">üìä</span>
            Dashboard ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          </h1>
          <button 
            onClick={refreshStatus}
            disabled={refreshing}
            className="refresh-btn"
          >
            {refreshing ? '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä...' : 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'}
          </button>
        </div>
        
        <div className="stats-grid">
          <div className="stat-card">
            <div className="stat-icon">üìÖ</div>
            <div className="stat-info">
              <div className="stat-value">{schedules.length}</div>
              <div className="stat-label">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚úÖ</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß').length}
              </div>
              <div className="stat-label">‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚è≥</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô').length}
              </div>
              <div className="stat-label">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚è∏Ô∏è</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß').length}
              </div>
              <div className="stat-label">‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß</div>
            </div>
          </div>
        </div>

        <div className="schedules-table">
          <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤</h2>
          {schedules.length === 0 ? (
            <div className="empty-table">
              <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏à‡∏ô‡∏µ‡πâ</p>
              <Link to="/MinerGroup" className="create-link">
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
              </Link>
            </div>
          ) : (
            <table>
              <thead>
                <tr>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°</th>
                  <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                  <th>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {schedules.map((schedule, index) => {
                  const status = getScheduleStatus(schedule);
                  return (
                    <tr key={schedule.id}>
                      <td>{schedule.groupNames?.join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td>
                        {schedule.type === 'immediate' && '‚ö° ‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'}
                        {schedule.type === 'scheduled' && 'üìÖ ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤'}
                        {schedule.type === 'user-inactive' && 'üï∞Ô∏è User ‡∏´‡∏≤‡∏¢'}
                      </td>
                      <td>
                        {schedule.type === 'user-inactive' && 
                          `${schedule.inactivityPeriod} ${schedule.inactivityUnit}`}
                        {schedule.type === 'scheduled' && 
                          `${new Date(schedule.date).toLocaleDateString('th-TH')} ${schedule.time}`}
                        {schedule.type === 'immediate' && '-'}
                      </td>
                      <td>{schedule.messages?.length || 0}</td>
                      <td>
                        <span 
                          className="status-badge"
                          style={{ backgroundColor: getStatusColor(status) }}
                        >
                          {status}
                        </span>
                      </td>
                      <td>
                        <button 
                          className="action-btn view-btn"
                          onClick={() => viewScheduleDetails(schedule)}
                        >
                          üëÅÔ∏è ‡∏î‡∏π
                        </button>
                        {status !== '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß' && (
                          <button 
                            className="action-btn toggle-btn"
                            onClick={() => toggleScheduleStatus(schedule)}
                          >
                            {status === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' ? '‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î' : '‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°'}
                          </button>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          )}
        </div>

        <Link to="/MinerGroup" className="back-link">
          ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
        </Link>
      </div>
    </div>
  );
}

export default ScheduleDashboard;