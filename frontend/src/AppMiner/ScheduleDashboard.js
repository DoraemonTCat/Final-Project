import React, { useState, useEffect } from 'react';
import '../CSS/ScheduleDashboard.css';
import Sidebar from "./Sidebar";
import { getPageSchedules, deleteSchedule } from "../Features/Tool";

function ScheduleDashboard() {
  const [selectedPage, setSelectedPage] = useState('');
  const [schedules, setSchedules] = useState([]);
  const [activeSchedules, setActiveSchedules] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedSchedule, setSelectedSchedule] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const savedPage = localStorage.getItem("selectedPage");
    if (savedPage) {
      setSelectedPage(savedPage);
      loadSchedules(savedPage);
      loadActiveSchedules(savedPage);
    }
  }, []);

  const loadActiveSchedules = async (pageId) => {
    try {
      const response = await fetch(`http://localhost:8000/active-schedules/${pageId}`);
      if (!response.ok) throw new Error('Failed to load active schedules');
      const data = await response.json();
      const activeIds = data.active_schedules.map(s => s.id);
      setActiveSchedules(activeIds);
    } catch (error) {
      console.error('Error loading active schedules:', error);
    }
  };

  const loadSchedules = async (pageId) => {
    setLoading(true);
    try {
      const data = await getPageSchedules(pageId);
      setSchedules(data.schedules || []);
    } catch (error) {
      console.error('Error loading schedules:', error);
      setSchedules([]);
    } finally {
      setLoading(false);
    }
  };

  const refreshStatus = async () => {
    setRefreshing(true);
    try {
      await loadSchedules(selectedPage);
      await loadActiveSchedules(selectedPage);
      alert("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error('Error refreshing status:', error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä");
    } finally {
      setRefreshing(false);
    }
  };

  const getScheduleStatus = (schedule) => {
    const isActive = activeSchedules.includes(schedule.id);

    if (schedule.type === 'immediate') return '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß';
    if (schedule.type === 'user-inactive') return isActive ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß';
    if (schedule.type === 'scheduled') {
      if (schedule.scheduled_at) {
        const scheduleTime = new Date(schedule.scheduled_at);
        if (scheduleTime > new Date()) return isActive ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß';
      }
      return '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß';
    }
    return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
  };

  const getStatusColor = (status) => {
    switch (status) {
      case '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß': return '#48bb78';
      case '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô': return '#4299e1';
      case '‡∏£‡∏≠‡∏™‡πà‡∏á': return '#ed8936';
      case '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß': return '#e53e3e';
      default: return '#718096';
    }
  };

  const toggleScheduleStatus = async (schedule) => {
    const status = getScheduleStatus(schedule);

    try {
      if (status === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô') {
        const response = await fetch('http://localhost:8000/schedule/deactivate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            page_id: selectedPage,
            schedule_id: schedule.id
          })
        });

        if (!response.ok) throw new Error('Failed to deactivate');
        alert("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        const response = await fetch('http://localhost:8000/schedule/activate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            page_id: selectedPage,
            schedule: {
              ...schedule,
              pageId: selectedPage
            }
          })
        });

        if (!response.ok) throw new Error('Failed to activate');
        alert("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      }

      await loadActiveSchedules(selectedPage);

    } catch (error) {
      console.error('Error toggling schedule:', error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
    }
  };

  const handleDeleteSchedule = async (scheduleId) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      return;
    }

    try {
      await deleteSchedule(scheduleId);
      alert("‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      await loadSchedules(selectedPage);
    } catch (error) {
      console.error('Error deleting schedule:', error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤");
    }
  };

  const viewScheduleDetails = (schedule) => {
    setSelectedSchedule(schedule);
    setShowDetailModal(true);
  };

  const getScheduleDescription = (schedule) => {
    if (schedule.type === 'immediate') return '‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ';
    if (schedule.type === 'scheduled' && schedule.scheduled_at) {
      const date = new Date(schedule.scheduled_at);
      return `${date.toLocaleDateString('th-TH')} ${date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}`;
    }
    if (schedule.type === 'user-inactive' && schedule.send_after_inactive) {
      // ‡πÅ‡∏õ‡∏•‡∏á timedelta string ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      const match = schedule.send_after_inactive.match(/(\d+)\s*(day|hour|minute)/);
      if (match) {
        const value = match[1];
        const unit = match[2];
        const unitThai = {
          'day': '‡∏ß‡∏±‡∏ô',
          'hour': '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
          'minute': '‡∏ô‡∏≤‡∏ó‡∏µ'
        };
        return `${value} ${unitThai[unit] || unit}`;
      }
      return schedule.send_after_inactive;
    }
    return '-';
  };

  const goToMinerGroup = () => {
    window.location.href = '/MinerGroup';
  };

  const goBack = () => {
    window.location.href = '/MinerGroup';
  };

  return (
    <div className="app-container">
      <Sidebar />

      <div className="dashboard-container">
        <div className="dashboard-header">
          <h1 className="dashboard-title">
            <span className="title-icon">üìä</span>
            Dashboard ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          </h1>
          <button 
            onClick={refreshStatus}
            disabled={refreshing}
            className="refresh-btn"
          >
            {refreshing ? '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä...' : 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'}
          </button>
        </div>
        
        <div className="stats-grid">
          <div className="stat-card">
            <div className="stat-icon">üìÖ</div>
            <div className="stat-info">
              <div className="stat-value">{schedules.length}</div>
              <div className="stat-label">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚úÖ</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß').length}
              </div>
              <div className="stat-label">‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚è≥</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô').length}
              </div>
              <div className="stat-label">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</div>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚è∏Ô∏è</div>
            <div className="stat-info">
              <div className="stat-value">
                {schedules.filter(s => getScheduleStatus(s) === '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß').length}
              </div>
              <div className="stat-label">‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß</div>
            </div>
          </div>
        </div>

        <div className="schedules-table">
          <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤</h2>
          {loading ? (
            <div className="loading-state">
              <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
            </div>
          ) : schedules.length === 0 ? (
            <div className="empty-table">
              <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏à‡∏ô‡∏µ‡πâ</p>
              <button onClick={goToMinerGroup} className="create-link">
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          ) : (
            <table>
              <thead>
                <tr>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°</th>
                  <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                  <th>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {schedules.map((schedule) => {
                  const status = getScheduleStatus(schedule);
                  
                  return (
                    <tr key={schedule.id}>
                      <td>
                        <div className="group-names-cell">
                          {schedule.group_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                        </div>
                      </td>
                      <td>
                        {schedule.type === 'immediate' && '‚ö° ‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'}
                        {schedule.type === 'scheduled' && 'üìÖ ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤'}
                        {schedule.type === 'user-inactive' && 'üï∞Ô∏è User ‡∏´‡∏≤‡∏¢'}
                      </td>
                      <td>{getScheduleDescription(schedule)}</td>
                      <td>{schedule.messages?.length || 0}</td>
                      <td>
                        <span 
                          className="status-badge"
                          style={{ backgroundColor: getStatusColor(status) }}
                        >
                          {status}
                        </span>
                      </td>
                      <td>
                        <button 
                          className="action-btn view-btn"
                          onClick={() => viewScheduleDetails(schedule)}
                        >
                          üëÅÔ∏è ‡∏î‡∏π
                        </button>
                        {status !== '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß' && (
                          <button 
                            className="action-btn toggle-btn"
                            onClick={() => toggleScheduleStatus(schedule)}
                          >
                            {status === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' ? '‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î' : '‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°'}
                          </button>
                        )}
                        <button 
                          className="action-btn delete-btn"
                          onClick={() => handleDeleteSchedule(schedule.id)}
                        >
                          üóëÔ∏è ‡∏•‡∏ö
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          )}
        </div>

        <button onClick={goBack} className="back-link">
          ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
        </button>
      </div>

      {/* Modal ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
      {showDetailModal && selectedSchedule && (
        <div className="modal-overlay" onClick={() => setShowDetailModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤</h3>
              <button className="modal-close" onClick={() => setShowDetailModal(false)}>‚úñ</button>
            </div>
            
            <div className="modal-body">
              <div className="detail-section">
                <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</h4>
                <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {
                  selectedSchedule.type === 'immediate' ? '‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ' :
                  selectedSchedule.type === 'scheduled' ? '‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤' : 'User ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ'
                }</p>
                <p><strong>‡∏Å‡∏•‡∏∏‡πà‡∏°:</strong> {selectedSchedule.group_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                <p><strong>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:</strong> {getScheduleDescription(selectedSchedule)}</p>
                {selectedSchedule.frequency && selectedSchedule.frequency !== 'once' && (
                  <p><strong>‡∏ó‡∏≥‡∏ã‡πâ‡∏≥:</strong> {
                    selectedSchedule.frequency === 'daily' ? '‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô' :
                    selectedSchedule.frequency === 'weekly' ? '‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå' : '‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'
                  }</p>
                )}
              </div>

              <div className="detail-section">
                <h4>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ({selectedSchedule.messages?.length || 0})</h4>
                <div className="messages-list">
                  {selectedSchedule.messages?.map((msg, idx) => (
                    <div key={idx} className="message-item">
                      <span className="message-number">{idx + 1}.</span>
                      <span className="message-type">
                        {msg.type === 'text' ? 'üí¨' : msg.type === 'image' ? 'üñºÔ∏è' : 'üìπ'}
                      </span>
                      <span className="message-content">
                        {msg.type === 'text' ? msg.content : `[${msg.type.toUpperCase()}] ${msg.content}`}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="detail-section">
                <h4>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h4>
                <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</strong> {getScheduleStatus(selectedSchedule)}</p>
                <p><strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:</strong> {new Date(selectedSchedule.created_at).toLocaleString('th-TH')}</p>
                {selectedSchedule.updated_at && (
                  <p><strong>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</strong> {new Date(selectedSchedule.updated_at).toLocaleString('th-TH')}</p>
                )}
              </div>
            </div>

            <div className="modal-footer">
              <button className="modal-btn" onClick={() => setShowDetailModal(false)}>‡∏õ‡∏¥‡∏î</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default ScheduleDashboard;