"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
"""

import requests
import json
from datetime import datetime, timedelta

# Configuration
BASE_URL = "http://localhost:8000"
PAGE_ID = "577695622104397"  # ‡πÉ‡∏™‡πà Page ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

def check_conversations():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö conversations ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    print("üîç Checking conversations with last message time...")
    
    response = requests.get(f"{BASE_URL}/conversations-with-last-message/{PAGE_ID}")
    
    if response.status_code != 200:
        print(f"‚ùå Error: {response.status_code}")
        print(response.text)
        return
    
    data = response.json()
    conversations = data.get('conversations', [])
    
    print(f"‚úÖ Found {len(conversations)} conversations\n")
    
    # ‡πÅ‡∏™‡∏î‡∏á 5 conversations ‡πÅ‡∏£‡∏Å
    for i, conv in enumerate(conversations[:5]):
        print(f"Conversation {i+1}:")
        print(f"  User: {conv.get('user_name', 'Unknown')}")
        print(f"  PSID: {conv.get('raw_psid', 'N/A')}")
        print(f"  Last message time: {conv.get('last_user_message_time', 'Never')}")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
        if conv.get('last_user_message_time'):
            last_msg_time = datetime.fromisoformat(conv['last_user_message_time'].replace('T', ' ').split('+')[0])
            time_diff = datetime.now() - last_msg_time
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
            minutes_diff = int(time_diff.total_seconds() / 60)
            hours_diff = int(minutes_diff / 60)
            days_diff = int(hours_diff / 24)
            
            if days_diff > 0:
                print(f"  ‚è∞ ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {days_diff} ‡∏ß‡∏±‡∏ô {hours_diff % 24} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
            elif hours_diff > 0:
                print(f"  ‚è∞ ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {hours_diff} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes_diff % 60} ‡∏ô‡∏≤‡∏ó‡∏µ")
            else:
                print(f"  ‚è∞ ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {minutes_diff} ‡∏ô‡∏≤‡∏ó‡∏µ")
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏õ > 1 ‡∏ô‡∏≤‡∏ó‡∏µ)
            if minutes_diff >= 1:
                print(f"  ‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ)")
            else:
                print(f"  ‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á (‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏Ñ‡πà {minutes_diff} ‡∏ô‡∏≤‡∏ó‡∏µ)")
        
        print("-" * 50)

def test_direct_inactivity_check():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
    print("\nüß™ Testing direct inactivity check (1 minute)...")
    
    response = requests.get(f"{BASE_URL}/schedule/test-inactivity/{PAGE_ID}?minutes=1")
    
    if response.status_code != 200:
        print(f"‚ùå Error: {response.status_code}")
        print(response.text)
        return
    
    result = response.json()
    print(json.dumps(result, indent=2))
    
    if result.get('count', 0) > 0:
        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ {result['count']} users")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")

def check_system_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    print("\nüìä System Status:")
    
    response = requests.get(f"{BASE_URL}/schedule/system-status")
    
    if response.status_code != 200:
        print(f"‚ùå Error: {response.status_code}")
        return
    
    status = response.json()
    print(f"  Scheduler running: {status.get('is_running', False)}")
    print(f"  Active pages: {status.get('active_pages', [])}")
    print(f"  Total schedules: {status.get('total_schedules', 0)}")
    
    if not status.get('is_running'):
        print("  ‚ö†Ô∏è Scheduler ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö backend logs")

def create_test_schedule_1_minute():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á schedule ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1 ‡∏ô‡∏≤‡∏ó‡∏µ"""
    print("\nüöÄ Creating test schedule (1 minute inactivity)...")
    
    test_schedule = {
        "id": 9999,
        "type": "user-inactive",
        "inactivityPeriod": "1",
        "inactivityUnit": "minutes",
        "groups": [1],
        "messages": [
            {
                "type": "text",
                "content": "üîî ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏°‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞",
                "order": 0
            },
            {
                "type": "text",
                "content": "‚ú® ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞",
                "order": 1
            }
        ]
    }
    
    response = requests.post(
        f"{BASE_URL}/schedule/activate",
        json={
            "page_id": PAGE_ID,
            "schedule": test_schedule
        }
    )
    
    if response.status_code == 200:
        print("‚úÖ Schedule activated successfully!")
        print("‚è≥ ‡∏£‡∏≠ 30-60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    else:
        print(f"‚ùå Error: {response.status_code}")
        print(response.text)

def check_active_schedules():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö schedules ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    print("\nüìã Active Schedules:")
    
    response = requests.get(f"{BASE_URL}/active-schedules/{PAGE_ID}")
    
    if response.status_code != 200:
        print(f"‚ùå Error: {response.status_code}")
        return
    
    data = response.json()
    schedules = data.get('active_schedules', [])
    
    if not schedules:
        print("  ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ schedule ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    else:
        for schedule in schedules:
            print(f"  - ID: {schedule['id']}")
            print(f"    Type: {schedule['type']}")
            if schedule['type'] == 'user-inactive':
                print(f"    Period: {schedule.get('inactivityPeriod')} {schedule.get('inactivityUnit')}")
            print(f"    Messages: {len(schedule.get('messages', []))} messages")

def check_page_tokens():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö page tokens"""
    print("\nüîë Checking page tokens...")
    
    response = requests.get(f"{BASE_URL}/debug/tokens")
    
    if response.status_code == 200:
        data = response.json()
        print(f"  Page tokens count: {data.get('page_tokens_count', 0)}")
        if PAGE_ID in data.get('page_tokens', {}):
            print(f"  ‚úÖ Token for {PAGE_ID} exists")
        else:
            print(f"  ‚ùå No token for {PAGE_ID} - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook Page ‡∏Å‡πà‡∏≠‡∏ô!")

def full_diagnostic():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°"""
    print("üè• Running Full Diagnostic")
    print("=" * 60)
    
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tokens
    check_page_tokens()
    
    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    check_system_status()
    
    # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö conversations
    check_conversations()
    
    # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö active schedules
    check_active_schedules()
    
    print("\nüí° Recommendations:")
    print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    print("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö backend logs ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    print("3. ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô test_direct_inactivity_check() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á")
    print("4. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô create_test_schedule_1_minute() ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ")

if __name__ == "__main__":
    # ‚ö†Ô∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà PAGE_ID ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô!
    if PAGE_ID == "YOUR_PAGE_ID":
        print("‚ùå ERROR: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà PAGE_ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡πà‡∏≠‡∏ô!")
        print("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: PAGE_ID = 'YOUR_PAGE_ID'")
    else:
        print(f"üéØ Testing with PAGE_ID: {PAGE_ID}\n")
        
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
        full_diagnostic()
        
        # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á uncomment ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:
        # test_direct_inactivity_check()
        # create_test_schedule_1_minute()