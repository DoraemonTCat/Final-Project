import React, { useState, useEffect } from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import '../CSS/Default.css';
import {
  fetchPages, connectFacebook, saveMessageToDB, saveMessagesBatch,
  getMessagesBySetId, deleteMessageFromDB, createMessageSet, getMessageSetsByPage, 
  updateMessageSet, uploadMedia
} from "../Features/Tool";


function SetDefault() {
  const [pages, setPages] = useState([]);
  const [selectedPage, setSelectedPage] = useState("");
  const [loading, setLoading] = useState(false);
  const [messageSequence, setMessageSequence] = useState([]);
  const [selectedMessageSetId, setSelectedMessageSetId] = useState(null);
  const [messageSetName, setMessageSetName] = useState("");
  const [isEditMode, setIsEditMode] = useState(false);
  const [searchParams] = useSearchParams();
  const [uploadingFile, setUploadingFile] = useState(false);
  const [currentInput, setCurrentInput] = useState({
    type: 'text',
    content: '',
    file: null,
    preview: null,
    mediaData: null,
    filename: null
  });

  useEffect(() => {
    const loadPages = async () => {
      try {
        const pagesData = await fetchPages();
        setPages(pagesData);

        const savedPage = localStorage.getItem("selectedPage");
        if (savedPage && pagesData.some(page => page.id === savedPage)) {
          setSelectedPage(savedPage);
        }
      } catch (err) {
        console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏à‡πÑ‡∏î‡πâ:", err);
      }
    };

    loadPages();
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  useEffect(() => {
    const setId = searchParams.get('setId');
    if (setId && selectedPage) {
      loadExistingMessageSet(setId);
    }
  }, [searchParams, selectedPage]);

  const loadExistingMessageSet = async (setId) => {
    try {
      setLoading(true);
      setIsEditMode(true);
      setSelectedMessageSetId(parseInt(setId));

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      const sets = await getMessageSetsByPage(selectedPage);
      const currentSet = sets.find(s => s.id === parseInt(setId));
      if (currentSet) {
        setMessageSetName(currentSet.set_name);
      }

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡∏∏‡∏î
      const messages = await getMessagesBySetId(setId);
      const sequenceData = messages.map((msg, index) => ({
        id: msg.id || Date.now() + index,
        type: msg.message_type || 'text',
        content: msg.content || msg.message,
        order: msg.display_order || index,
        originalData: msg,
        mediaUrl: msg.media_url,
        filename: msg.filename
      }));
      setMessageSequence(sequenceData);
    } catch (err) {
      console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const loadMessages = async () => {
      if (selectedPage && !isEditMode) {
        setLoading(true);
        try {
          console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: ${selectedPage}`);
          const data = await getMessagesBySetId(selectedPage);
          console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, data);

          const sequenceData = Array.isArray(data) ? data.map((msg, index) => ({
            id: msg.id || Date.now() + index,
            type: msg.message_type || 'text',
            content: msg.content || msg.message,
            order: msg.display_order || index,
            originalData: msg,
            mediaUrl: msg.media_url,
            filename: msg.filename
          })) : [];
          setMessageSequence(sequenceData);
        } catch (err) {
          console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
          setMessageSequence([]);
        } finally {
          setLoading(false);
        }
      }
    };

    if (!isEditMode) {
      loadMessages();
    }
  }, [selectedPage, isEditMode]);

  const handlePageChange = (e) => {
    const pageId = e.target.value;
    console.log(`üìÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏û‡∏à‡πÄ‡∏õ‡πá‡∏ô: ${pageId}`);
    setSelectedPage(pageId);

    if (pageId) {
      localStorage.setItem("selectedPage", pageId);
    } else {
      localStorage.removeItem("selectedPage");
    }

    setCurrentInput({
      type: 'text',
      content: '',
      file: null,
      preview: null,
      mediaData: null,
      filename: null
    });
  };

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setUploadingFile(true);
    
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 25MB)
      if (file.size > 100 * 1024 * 1024) {
        alert("‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25MB");
        return;
      }

      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô base64
      const reader = new FileReader();
      reader.onload = (e) => {
        const base64Data = e.target.result;
        const preview = URL.createObjectURL(file);
        
        setCurrentInput(prev => ({
          ...prev,
          file,
          preview,
          content: file.name,
          mediaData: base64Data,
          filename: file.name
        }));
      };
      
      reader.readAsDataURL(file);
    } catch (error) {
      console.error("Error uploading file:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå");
    } finally {
      setUploadingFile(false);
    }
  };

  const addToSequence = () => {
    if (!selectedPage) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    if (currentInput.type === 'text' && !currentInput.content.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°");
      return;
    }

    if ((currentInput.type === 'image' || currentInput.type === 'video') && !currentInput.file) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå");
      return;
    }

    const newItem = {
      id: Date.now(),
      type: currentInput.type,
      content: currentInput.content || currentInput.file?.name || '',
      file: currentInput.file,
      preview: currentInput.preview,
      mediaData: currentInput.mediaData,
      filename: currentInput.filename,
      order: messageSequence.length
    };

    setMessageSequence(prev => [...prev, newItem]);

    if (currentInput.preview) {
      URL.revokeObjectURL(currentInput.preview);
    }
    setCurrentInput({
      type: 'text',
      content: '',
      file: null,
      preview: null,
      mediaData: null,
      filename: null
    });
  };

  const removeFromSequence = (id) => {
    setMessageSequence(prev => {
      const itemToDelete = prev.find(item => item.id === id);
      if (itemToDelete?.preview) {
        URL.revokeObjectURL(itemToDelete.preview);
      }

      const newSequence = prev.filter(item => item.id !== id);
      return newSequence.map((item, index) => ({
        ...item,
        order: index
      }));
    });
  };

  const handleDragStart = (e, index) => {
    e.dataTransfer.setData('text/plain', index.toString());
    e.currentTarget.classList.add('drag-start');
  };

  const handleDragEnd = (e) => {
    e.currentTarget.classList.remove('drag-start');
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (e, dropIndex) => {
    e.preventDefault();
    const dragIndex = parseInt(e.dataTransfer.getData('text/plain'));

    if (dragIndex === dropIndex) return;

    const newSequence = [...messageSequence];
    const draggedItem = newSequence[dragIndex];

    newSequence.splice(dragIndex, 1);
    newSequence.splice(dropIndex, 0, draggedItem);

    newSequence.forEach((item, index) => {
      item.order = index;
    });

    setMessageSequence(newSequence);
  };

  const saveMessageSequence = async () => {
    if (!messageSetName.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°");
      return;
    }
    if (!selectedPage) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    try {
      setLoading(true);
      let setId = selectedMessageSetId;

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      if (isEditMode && setId) {
        await updateMessageSet(setId, messageSetName.trim());
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        const oldMessages = messageSequence.filter(item => item.originalData);
        for (const msg of oldMessages) {
          if (msg.originalData?.id) {
            await deleteMessageFromDB(msg.originalData.id);
          }
        }
      } else if (!setId) {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
        const newSet = await createMessageSet({
          page_id: selectedPage,
          set_name: messageSetName.trim()
        });
        setId = newSet.id;
        setSelectedMessageSetId(setId);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà
        const payloads = messageSequence.map((item, index) => {
          const payload = {
            message_set_id: setId,
            page_id: selectedPage,
            message_type: item.type,
            content: item.type === 'text' ? item.content : (item.filename || 'untitled'),
            display_order: index,
          };

          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô media ‡πÅ‡∏•‡∏∞‡∏°‡∏µ base64 data
          if (item.type !== 'text' && item.mediaData) {
            payload.media_data = item.mediaData;
            payload.filename = item.filename || `${item.type}.${item.type === 'image' ? 'jpg' : 'mp4'}`;
          }

          return payload;
        });

      await saveMessagesBatch(payloads);
      alert(isEditMode ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
      const data = await getMessagesBySetId(setId);
      const sequenceData = data.map((msg, index) => ({
        id: msg.id || Date.now() + index,
        type: msg.message_type || 'text',
        content: msg.content || msg.message,
        order: msg.display_order || index,
        originalData: msg,
        mediaUrl: msg.media_url,
        filename: msg.filename
      }));

      setMessageSequence(sequenceData);
      setIsEditMode(true);
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: " + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteMessage = async (messageId) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      return;
    }

    try {
      console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ID: ${messageId}`);
      await deleteMessageFromDB(messageId);
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

      setMessageSequence(prevMessages => prevMessages.filter(msg => msg.originalData?.id !== messageId));

    } catch (err) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°");
    }
  };

  const getTypeIcon = (type) => {
    switch (type) {
      case 'text': return 'üí¨';
      case 'image': return 'üñºÔ∏è';
      case 'video': return 'üìπ';
      default: return 'üìÑ';
    }
  };

 const getContentDisplay = (item) => {
  if (item.type === 'text') {
    return item.content;
  } else {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö media ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    if (item.filename) {
      return item.filename;
    } else if (item.content && item.content.includes('|')) {
      // ‡∏ñ‡πâ‡∏≤ content ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "path|filename"
      const parts = item.content.split('|');
      return parts[1] || parts[0];
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡πÜ
      return item.content.replace(/^\[IMAGE\]\s*/, '').replace(/^\[VIDEO\]\s*/, '');
    }
  }
};

  const selectedPageName = pages.find(page => page.id === selectedPage)?.name || "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à";

  return (
    <div className="app-container">
      <aside className="sidebar">
        <h3 className="sidebar-title">‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</h3>
        <button onClick={connectFacebook} className="BT">
          <svg width="15" height="20" viewBox="0 0 320 512" fill="#fff" className="fb-icon">
            <path d="M279.14 288l14.22-92.66h-88.91V127.91c0-25.35 12.42-50.06 52.24-50.06H293V6.26S259.5 0 225.36 0c-73.22 0-121 44.38-121 124.72v70.62H22.89V288h81.47v224h100.2V288z" />
          </svg>
        </button>
        <hr />
        <select value={selectedPage} onChange={handlePageChange} className="select-page">
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à --</option>
          {pages.map((page) => (
            <option key={page.id} value={page.id}>
              {page.name}
            </option>
          ))}
        </select>
        <Link to="/App" className="title" style={{ marginLeft: "64px" }}>‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link><br />
        <Link to="/Set_Miner" className="title" style={{ marginLeft: "50px" }}>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏∏‡∏î</Link><br />
        <a href="#" className="title" style={{ marginLeft: "53px" }}>Dashboard</a><br />
        <a href="#" className="title" style={{ marginLeft: "66px" }}>Setting</a><br />
      </aside>

      <div className="message-settings-container">
        <h1 className="header">
          {isEditMode ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" : "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Default"}
        </h1>

        <div className="page-info">
          <p style={{ textAlign: "center" }}><strong>‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</strong> {selectedPageName}</p>
        </div>

        <div className="sequence-container">
          <div className="sequence-card">
            <h3 className="sequence-header">üìù {isEditMode ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" : "‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}</h3>
            <div className="input-form">
              <label className="input-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</label>
              <input
                type="text"
                value={messageSetName}
                onChange={(e) => setMessageSetName(e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
                className="input-text"
              />
            </div>
            <h3 className="sequence-header">‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà</h3>

            <div className="input-form">
              <label className="input-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>
              <select
                value={currentInput.type}
                onChange={(e) => setCurrentInput(prev => ({
                  ...prev,
                  type: e.target.value,
                  content: '',
                  file: null,
                  preview: null,
                  mediaData: null,
                  filename: null
                }))}
                className="input-select"
              >
                <option value="text">üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</option>
                <option value="image">üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</option>
                <option value="video">üìπ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</option>
              </select>
            </div>

            {currentInput.type === 'text' ? (
              <div className="input-form">
                <label className="input-label">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</label>
                <textarea
                  value={currentInput.content}
                  onChange={(e) => setCurrentInput(prev => ({ ...prev, content: e.target.value }))}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á..."
                  className="input-textarea"
                />
              </div>
            ) : (
              <div className="input-form">
                <label className="input-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå {currentInput.type === 'image' ? '(JPG, PNG, GIF, WEBP)' : '(MP4, MOV, AVI)'}:</label>
                <input
                  type="file"
                  accept={currentInput.type === 'image' ? 'image/jpeg,image/png,image/gif,image/webp' : 'video/mp4,video/quicktime,video/x-msvideo'}
                  onChange={handleFileUpload}
                  className="input-file"
                  disabled={uploadingFile}
                />
                {uploadingFile && <p style={{ color: '#3498db', fontSize: '14px' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå...</p>}
                {currentInput.preview && (
                  <div className="preview-container">
                    {currentInput.type === 'image' ? (
                      <img
                        src={currentInput.preview}
                        alt="Preview"
                        className="preview-image"
                      />
                    ) : (
                      <video
                        src={currentInput.preview}
                        controls
                        className="preview-video"
                      />
                    )}
                    <p style={{ fontSize: '12px', color: '#666', marginTop: '5px' }}>
                      {currentInput.filename} ({(currentInput.file?.size / (1024 * 1024)).toFixed(2)} MB)
                    </p>
                  </div>
                )}
              </div>
            )}

            <button
              onClick={addToSequence}
              disabled={!selectedPage || uploadingFile}
              className="add-btn"
            >
              ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö
            </button>
          </div>

          <div className="sequence-card">
            <div className="sequence-header-container">
              <h3 className="sequence-header">üìã ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á </h3>
              <button
                onClick={saveMessageSequence}
                className="save-btn"
                disabled={loading}
              >
                {loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : (isEditMode ? "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")}
              </button>
            </div>

            <div className="sequence-hint">
              üí° ‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
            </div>

            {loading ? (
              <div className="loading-state">
                üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
              </div>
            ) : messageSequence.length === 0 ? (
              <div className="empty-state">
                {selectedPage ?
                  "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!" :
                  "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
                }
              </div>
            ) : (
              <div className="sequence-list">
                {messageSequence.map((item, index) => (
                  <div
                    key={item.id}
                    draggable
                    onDragStart={(e) => handleDragStart(e, index)}
                    onDragEnd={handleDragEnd}
                    onDragOver={handleDragOver}
                    onDrop={(e) => handleDrop(e, index)}
                    className={`sequence-item ${item.originalData ? 'sequence-item-saved' : ''}`}
                  >
                    <div className="sequence-order">
                      {index + 1}
                    </div>

                    <div className="sequence-icon">
                      {getTypeIcon(item.type)}
                    </div>

                    <div className="sequence-content">
                      <div className="sequence-type">
                        {item.type === 'text' ? '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°' : item.type === 'image' ? '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' : '‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠'}
                        {item.originalData && <span className="sequence-saved-label"> (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß)</span>}
                      </div>
                      <div className="sequence-text">
                        {getContentDisplay(item)}
                        {item.mediaUrl && (
                          <a 
                            href={`http://localhost:8000${item.mediaUrl}`} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            style={{ fontSize: '12px', marginLeft: '10px' }}
                          >
                            [‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå]
                          </a>
                        )}
                      </div>
                    </div>

                    <button
                      onClick={() => item.originalData ?
                        handleDeleteMessage(item.originalData.id) :
                        removeFromSequence(item.id)
                      }
                      className="sequence-delete-btn"
                      title="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        <Link to="/manage-message-sets" className="back-button">
          ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        </Link>
      </div>
    </div>
  );
}

export default SetDefault;