from app.service.facebook_api import fb_get, send_message, send_media, send_media_from_base64, async_fb_get, batch_fb_requests
from fastapi.responses import JSONResponse, HTMLResponse, RedirectResponse
from datetime import datetime, timedelta
import requests
from fastapi import APIRouter, Response, Request, Depends, BackgroundTasks
from sqlalchemy.orm import Session
from app.database import crud, schemas, database, models
from app.database.database import get_db
from app import config
from pydantic import BaseModel
from typing import Optional, List, Dict
import asyncio
import aiohttp
from collections import defaultdict
import time
import json

router = APIRouter()

# ================================
# üîß Memory Storage ‡πÅ‡∏•‡∏∞ Caching
# ================================
page_tokens = {}  # key = page_id, value = PAGE_ACCESS_TOKEN
page_names = {}   # key = page_id, value = page_name

# Cache storage
conversation_cache = {}  # key = page_id, value = {"data": conversations, "timestamp": time}
CACHE_DURATION = 60  # Cache duration in seconds

class SendMessageRequest(BaseModel):
    message: str
    type: Optional[str] = "text"  # "text", "image", or "video"
    media_data: Optional[str] = None  # base64 encoded media
    filename: Optional[str] = None

class BatchSendRequest(BaseModel):
    psids: List[str]
    messages: List[Dict[str, str]]  # [{"type": "text", "content": "...", "media_data": "..."}]

@router.get("/connect", response_class=HTMLResponse)
async def connect_facebook_page():
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook Page</title>
        <meta charset="utf-8">
        <style>
            body {{
                font-family: Arial, sans-serif;
                text-align: center;
                margin-top: 100px;
                background-color: #f0f2f5;
            }}
            a.button {{
                background-color: #4267B2;
                color: white;
                padding: 14px 24px;
                text-decoration: none;
                font-size: 18px;
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }}
            a.button:hover {{
                background-color: #365899;
            }}
        </style>
    </head>
    <body>
        <h1>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook Page ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>
        <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</p>
        <a href="{config.OAUTH_LINK}" class="button">üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook</a>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@router.get("/facebook/callback")
def facebook_callback(code: str, db: Session = Depends(get_db)):
    print(f"üîó Facebook callback received with code: {code[:20]}...")
    
    # ‡∏î‡∏∂‡∏á access token
    token_url = "https://graph.facebook.com/v14.0/oauth/access_token"
    params = {
        "client_id": config.FB_APP_ID,
        "redirect_uri": config.REDIRECT_URI,
        "client_secret": config.FB_APP_SECRET,
        "code": code
    }

    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠ access token...")
    res = requests.get(token_url, params=params)
    token_data = res.json()

    if "error" in token_data:
        print(f"‚ùå Error getting access token: {token_data['error']}")
        return JSONResponse(status_code=400, content={"error": token_data['error']})

    user_token = token_data.get("access_token")
    print("‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö user access token ‡πÅ‡∏•‡πâ‡∏ß")

    # ‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏à
    pages_url = "https://graph.facebook.com/me/accounts"
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏à...")
    pages_res = requests.get(pages_url, params={"access_token": user_token})
    pages = pages_res.json()

    if "error" in pages:
        print(f"‚ùå Error getting pages: {pages['error']}")
        return JSONResponse(status_code=400, content={"error": pages['error']})

    connected_pages = []
    for page in pages.get("data", []):
        page_id = page["id"]
        access_token = page["access_token"]
        page_name = page.get("name", f"‡πÄ‡∏û‡∏à {page_id}")

        # ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô local dictionary
        page_tokens[page_id] = access_token
        page_names[page_id] = page_name

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢
        existing = crud.get_page_by_page_id(db, page_id)
        if not existing:
            new_page = schemas.FacebookPageCreate(page_id=page_id, page_name=page_name)
            crud.create_page(db, new_page)

        connected_pages.append({"id": page_id, "name": page_name})
        print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {page_name} (ID: {page_id})")

    print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(connected_pages)} ‡πÄ‡∏û‡∏à")

    if connected_pages:
        return RedirectResponse(url=f"http://localhost:3000/?page_id={connected_pages[0]['id']}")
    else:
        return RedirectResponse(url="http://localhost:3000/?error=no_pages")

@router.get("/pages")
async def get_connected_pages():
    pages_list = [{"id": k, "name": page_names.get(k, f"‡πÄ‡∏û‡∏à {k}")} for k in page_tokens.keys()]
    print(f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {len(pages_list)} ‡πÄ‡∏û‡∏à")
    return {"pages": pages_list}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache
def get_cached_conversations(page_id: str):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"""
    if page_id in conversation_cache:
        cache_data = conversation_cache[page_id]
        if time.time() - cache_data["timestamp"] < CACHE_DURATION:
            print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
            return cache_data["data"]
    return None

def set_cached_conversations(page_id: str, data: list):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á cache"""
    conversation_cache[page_id] = {
        "data": data,
        "timestamp": time.time()
    }

@router.get("/psids")
async def get_user_psids(page_id: str):
    """‡∏î‡∏∂‡∏á PSID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ cache)"""
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á PSID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
    cached_data = get_cached_conversations(page_id)
    if cached_data:
        return JSONResponse(content={"conversations": cached_data, "total": len(cached_data), "cached": True})
    
    access_token = page_tokens.get(page_id)
    if not access_token:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏à‡∏Å‡πà‡∏≠‡∏ô"}
        )
    
    print(f"‚úÖ ‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
    
    conversations = await get_conversations_with_participants_async(page_id, access_token)
    if conversations:
        data = await extract_psids_with_conversation_id_async(conversations, access_token, page_id)
        set_cached_conversations(page_id, data)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(data)}")
        return JSONResponse(content={"conversations": data, "total": len(data), "cached": False})
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations ‡πÑ‡∏î‡πâ")
        return JSONResponse(
            status_code=500, 
            content={"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversation ‡πÑ‡∏î‡πâ"}
        )

async def get_conversations_with_participants_async(page_id, access_token: str):
    """‡∏î‡∏∂‡∏á conversations ‡πÅ‡∏ö‡∏ö async"""
    endpoint = f"{page_id}/conversations"
    params = {
        "fields": "participants,updated_time,id",
        "limit": 100
    }
    
    async with aiohttp.ClientSession() as session:
        result = await async_fb_get(session, endpoint, params, access_token)
        if "error" in result:
            print(f"‚ùå Error getting conversations: {result['error']}")
            return None
        print(f"‚úÖ ‡∏û‡∏ö conversations ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(result.get('data', []))}")
        return result

async def extract_psids_with_conversation_id_async(conversations_data, access_token, page_id):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations ‡πÅ‡∏ö‡∏ö async"""
    result = []
    if not conversations_data or "data" not in conversations_data:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations")
        return result

    # ‡πÉ‡∏ä‡πâ asyncio.gather ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    tasks = []
    async with aiohttp.ClientSession() as session:
        for convo in conversations_data.get("data", []):
            task = process_single_conversation(session, convo, access_token, page_id)
            tasks.append(task)
        
        processed_conversations = await asyncio.gather(*tasks)
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ user_psids
    result = [conv for conv in processed_conversations if conv["user_psids"]]
    return result

async def process_single_conversation(session, convo, access_token, page_id):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• conversation ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    convo_id = convo.get("id")
    updated_time = convo.get("updated_time")
    participants = convo.get("participants", {}).get("data", [])
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    messages_data = await get_conversation_messages_async(session, convo_id, access_token)
    
    created_time = None
    last_user_message_time = None
    if messages_data and "data" in messages_data:
        messages = messages_data["data"]
        if messages:
            created_time = messages[-1].get("created_time")
            
            # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user
            for message in messages:
                sender_id = message.get("from", {}).get("id")
                if sender_id and sender_id != page_id:
                    last_user_message_time = message.get("created_time")
                    break
    
    user_psids = []
    user_names = []
    
    for participant in participants:
        participant_id = participant.get("id")
        if participant_id and participant_id != page_id:
            user_psids.append(participant_id)
            user_name = participant.get("name") or f"User...{participant_id[-8:]}"
            user_names.append(user_name)
    
    return {
        "conversation_id": convo_id,
        "psids": user_psids,
        "names": user_names,
        "updated_time": updated_time,
        "created_time": created_time,
        "last_user_message_time": last_user_message_time,
        "user_psids": user_psids  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á
    }

async def get_conversation_messages_async(session, conversation_id, access_token):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô conversation ‡πÅ‡∏ö‡∏ö async"""
    endpoint = f"{conversation_id}/messages"
    params = {
        "fields": "from,created_time",
        "limit": 10
    }
    return await async_fb_get(session, endpoint, params, access_token)

@router.post("/send/{page_id}/{psid}")
async def send_user_message_by_psid(page_id: str, psid: str, req: SendMessageRequest):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô PSID"""
    print(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á {req.type} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á PSID: {psid}")
    
    access_token = page_tokens.get(page_id)
    if not access_token:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
        return {"error": "Page token not found. Please connect via /connect first."}

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PSID
    if not psid or len(psid) < 10:
        print(f"‚ùå PSID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {psid}")
        return {"error": "Invalid PSID"}
    
    try:
        if req.type == "text":
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
            result = send_message(psid, req.message, access_token)
        elif req.type in ["image", "video"]:
            # ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            if req.media_data and req.filename:
                # ‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å base64 data
                result = send_media_from_base64(
                    psid, 
                    req.type, 
                    req.media_data, 
                    req.filename, 
                    access_token
                )
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL
                result = send_media(psid, req.type, req.message, access_token)
        else:
            return {"error": "Invalid message type"}
        
        if "error" in result:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á {req.type}: {result['error']}")
            return {"error": result["error"], "details": result}
        else:
            print(f"‚úÖ ‡∏™‡πà‡∏á {req.type} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            # ‡∏•‡πâ‡∏≤‡∏á cache ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if page_id in conversation_cache:
                del conversation_cache[page_id]
            return {"success": True, "result": result}
            
    except Exception as e:
        print(f"‚ùå Exception: {str(e)}")
        return {"error": str(e)}

@router.post("/send-batch/{page_id}")
async def send_batch_messages(page_id: str, req: BatchSendRequest, background_tasks: BackgroundTasks):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö batch ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏•‡∏≤‡∏¢ PSID"""
    access_token = page_tokens.get(page_id)
    if not access_token:
        return {"error": "Page token not found"}
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° background task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    background_tasks.add_task(
        send_messages_in_background,
        page_id,
        req.psids,
        req.messages,
        access_token
    )
    
    return {
        "status": "Processing",
        "message": f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á {len(req.psids)} ‡∏Ñ‡∏ô",
        "total_messages": len(req.psids) * len(req.messages)
    }

async def send_messages_in_background(page_id: str, psids: List[str], messages: List[Dict], access_token: str):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô background"""
    for psid in psids:
        for msg in messages:
            try:
                if msg["type"] == "text":
                    send_message(psid, msg["content"], access_token)
                elif msg["type"] in ["image", "video"] and msg.get("media_data"):
                    send_media_from_base64(
                        psid,
                        msg["type"],
                        msg["media_data"],
                        msg.get("filename", "media"),
                        access_token
                    )
                # Delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å rate limit
                await asyncio.sleep(0.5)
            except Exception as e:
                print(f"‚ùå Error sending to {psid}: {e}")

# Optimized endpoint with pagination
@router.get("/conversations-with-last-message/{page_id}")
async def get_conversations_with_last_message(
    page_id: str, 
    limit: int = 50, 
    offset: int = 0,
    use_cache: bool = True
):
    """‡∏î‡∏∂‡∏á conversations ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏°‡∏µ pagination ‡πÅ‡∏•‡∏∞ cache"""
    print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id} (limit: {limit}, offset: {offset})")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏ñ‡πâ‡∏≤ use_cache = True
    if use_cache:
        cached_data = get_cached_conversations(f"{page_id}_full")
        if cached_data:
            # Apply pagination to cached data
            paginated_data = cached_data[offset:offset + limit]
            return {
                "conversations": paginated_data,
                "total": len(cached_data),
                "limit": limit,
                "offset": offset,
                "cached": True,
                "optimization": "Used cached data with pagination"
            }
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö access token
    access_token = page_tokens.get(page_id)
    if not access_token:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏à‡∏Å‡πà‡∏≠‡∏ô"}
        )
    
    try:
        # ‡πÉ‡∏ä‡πâ async function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        async with aiohttp.ClientSession() as session:
            # Step 1: ‡∏î‡∏∂‡∏á conversations
            conversations_endpoint = f"{page_id}/conversations"
            conversations_params = {
                "fields": "participants,updated_time,id",
                "limit": 100  # ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ paginate
            }
            
            conversations_result = await async_fb_get(
                session, 
                conversations_endpoint, 
                conversations_params, 
                access_token
            )
            
            if "error" in conversations_result:
                return JSONResponse(status_code=400, content={"error": conversations_result["error"]})
            
            conversations_data = conversations_result.get("data", [])
            print(f"‚úÖ ‡∏û‡∏ö conversations ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(conversations_data)}")
            
            if not conversations_data:
                return {"conversations": [], "total": 0}
            
            # Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á batch requests
            batch_requests = []
            for i, conv in enumerate(conversations_data):
                conversation_id = conv.get("id")
                batch_requests.append({
                    "method": "GET",
                    "relative_url": f"{conversation_id}/messages?fields=message,from,created_time&limit=10"
                })
            
            # Step 3: ‡∏™‡πà‡∏á batch request
            print(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á batch request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {len(batch_requests)} conversations...")
            
            batch_results = await batch_fb_requests(batch_requests, access_token)
            
            print(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå batch request: {len(batch_results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            # Step 4: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            result_conversations = []
            for i, conv in enumerate(conversations_data):
                conversation_id = conv.get("id")
                updated_time = conv.get("updated_time")
                participants = conv.get("participants", {}).get("data", [])
                
                # ‡∏´‡∏≤ user participants
                user_psids = []
                user_names = []
                
                for participant in participants:
                    participant_id = participant.get("id")
                    if participant_id and participant_id != page_id:
                        user_psids.append(participant_id)
                        user_name = participant.get("name")
                        
                        if not user_name:
                            user_name = f"User...{participant_id[-8:]}" if len(participant_id) > 8 else f"User {participant_id}"
                        
                        user_names.append(user_name)
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å batch result
                last_user_message_time = None
                first_created_time = None
                
                if i < len(batch_results) and batch_results[i].get("code") == 200:
                    try:
                        messages_data = json.loads(batch_results[i]["body"])
                        messages = messages_data.get("data", [])
                        
                        if messages:
                            first_created_time = messages[-1].get("created_time")
                            
                            # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user
                            for message in messages:
                                sender_id = message.get("from", {}).get("id")
                                if sender_id and sender_id != page_id:
                                    last_user_message_time = message.get("created_time")
                                    break
                                    
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error parsing messages for conversation {conversation_id}: {e}")
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô result
                if user_psids:
                    user_name = user_names[0] if user_names else "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"
                    
                    result_conversations.append({
                        "id": len(result_conversations) + 1,
                        "conversation_id": conversation_id,
                        "conversation_name": f" {user_name}",
                        "user_name": user_name,
                        "psids": user_psids,
                        "names": user_names,
                        "raw_psid": user_psids[0],
                        "updated_time": updated_time,
                        "created_time": first_created_time,
                        "last_user_message_time": last_user_message_time
                    })
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
            set_cached_conversations(f"{page_id}_full", result_conversations)
            
            # Apply pagination
            paginated_conversations = result_conversations[offset:offset + limit]
            
            print(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(result_conversations)} conversations (‡πÅ‡∏™‡∏î‡∏á {len(paginated_conversations)})")
            
            return {
                "conversations": paginated_conversations, 
                "total": len(result_conversations),
                "limit": limit,
                "offset": offset,
                "cached": False,
                "optimization": "Used batch API with pagination"
            }
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return JSONResponse(
            status_code=500, 
            content={"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}"}
        )

# Clear cache endpoint
@router.post("/clear-cache/{page_id}")
async def clear_cache(page_id: str):
    """‡∏•‡πâ‡∏≤‡∏á cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
    keys_to_remove = [key for key in conversation_cache.keys() if key.startswith(page_id)]
    for key in keys_to_remove:
        del conversation_cache[key]
    
    return {"message": f"Cleared cache for page {page_id}", "removed_keys": len(keys_to_remove)}

# Health check with cache info
@router.get("/cache-info")
async def get_cache_info():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    cache_info = {}
    for key, value in conversation_cache.items():
        age = time.time() - value["timestamp"]
        cache_info[key] = {
            "data_count": len(value["data"]),
            "age_seconds": round(age, 2),
            "expired": age > CACHE_DURATION
        }
    
    return {
        "cache_duration": CACHE_DURATION,
        "cached_pages": len(cache_info),
        "details": cache_info
    }

@router.get("/debug/tokens")
async def debug_tokens():
    """‡∏î‡∏π token ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ"""
    return {
        "page_tokens_count": len(page_tokens),
        "page_tokens": {k: f"{v[:20]}..." for k, v in page_tokens.items()},
        "page_names": page_names
    }

@router.get("/debug/conversations/{page_id}")
async def debug_conversations(page_id: str):
    """Debug conversations data"""
    access_token = page_tokens.get(page_id)
    if not access_token:
        return {"error": "Page token not found"}
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
    raw_conversations = await get_conversations_with_participants_async(page_id, access_token)
    
    return {
        "page_id": page_id,
        "has_token": bool(access_token),
        "token_preview": f"{access_token[:20]}..." if access_token else None,
        "raw_data": raw_conversations
    }