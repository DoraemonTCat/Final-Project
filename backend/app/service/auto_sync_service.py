import asyncio
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Set
from app.database import crud
from app.database.database import SessionLocal
from app.service.facebook_api import fb_get

logger = logging.getLogger(__name__)

class AutoSyncService:
    def __init__(self):
        self.is_running = False
        self.sync_interval = 10  # sync ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.page_tokens = {}
        # ‡πÄ‡∏Å‡πá‡∏ö track ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà sync ‡πÅ‡∏ï‡πà‡∏•‡∏∞ conversation
        self.last_sync_times: Dict[str, datetime] = {}
        # ‡πÄ‡∏Å‡πá‡∏ö message IDs ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        self.seen_messages: Dict[str, Set[str]] = {}
        
    def set_page_tokens(self, tokens: Dict[str, str]):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó page tokens"""
        self.page_tokens = tokens
        logger.info(f"üìå Updated page tokens for {len(tokens)} pages")
        
    async def start_auto_sync(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö auto sync"""
        self.is_running = True
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Auto Sync - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Facebook ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        while self.is_running:
            try:
                await self.sync_all_pages()
                await asyncio.sleep(self.sync_interval)
            except Exception as e:
                logger.error(f"‚ùå Error in auto sync: {e}")
                await asyncio.sleep(30)  # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
    
    async def sync_all_pages(self):
        """Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏à"""
        for page_id, access_token in self.page_tokens.items():
            try:
                await self.sync_page_conversations(page_id, access_token)
            except Exception as e:
                logger.error(f"‚ùå Error syncing page {page_id}: {e}")
                
    async def sync_page_conversations(self, page_id: str, access_token: str):
        """Sync conversations ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        logger.info(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á sync conversations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page: {page_id}")
        
        db = SessionLocal()
        try:
            # ‡∏î‡∏∂‡∏á page ‡∏à‡∏≤‡∏Å database
            page = crud.get_page_by_page_id(db, page_id)
            if not page:
                logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö page {page_id} ‡πÉ‡∏ô database")
                return
                
            # ‡∏î‡∏∂‡∏á conversations ‡∏à‡∏≤‡∏Å Facebook
            endpoint = f"{page_id}/conversations"
            params = {
                "fields": "participants,updated_time,id,messages.limit(20){created_time,from,message,id}",
                "limit": 50  # ‡∏î‡∏∂‡∏á 50 conversations ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            }
            
            result = fb_get(endpoint, params, access_token)
            
            if "error" in result:
                logger.error(f"‚ùå Error getting conversations: {result['error']}")
                return
                
            conversations = result.get("data", [])
            logger.info(f"üìä ‡∏û‡∏ö {len(conversations)} conversations")
            
            updated_count = 0
            new_count = 0
            restored_count = 0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
            
            # ‡πÄ‡∏Å‡πá‡∏ö PSIDs ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô Facebook
            found_psids = set()
            
            for convo in conversations:
                convo_id = convo.get("id")
                updated_time = convo.get("updated_time")
                participants = convo.get("participants", {}).get("data", [])
                messages = convo.get("messages", {}).get("data", [])
                
                # Initialize seen messages for this conversation
                if convo_id not in self.seen_messages:
                    self.seen_messages[convo_id] = set()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ participant
                for participant in participants:
                    participant_id = participant.get("id")
                    if participant_id and participant_id != page_id:
                        found_psids.add(participant_id)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° PSID ‡∏ó‡∏µ‡πà‡∏û‡∏ö
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ customer ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        existing_customer = crud.get_customer_by_psid(db, page.ID, participant_id)
                        
                        # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà page)
                        user_messages = [
                            msg for msg in messages 
                            if msg.get("from", {}).get("id") == participant_id
                        ]
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        has_new_message = False
                        latest_user_message_time = None
                        
                        if user_messages:
                            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
                            user_messages.sort(key=lambda x: x.get("created_time", ""), reverse=True)
                            latest_msg = user_messages[0]
                            msg_id = latest_msg.get("id")
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏´‡πá‡∏ô message ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                            if msg_id and msg_id not in self.seen_messages[convo_id]:
                                has_new_message = True
                                self.seen_messages[convo_id].add(msg_id)
                                logger.info(f"üí¨ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å {participant_id}: {latest_msg.get('message', '')[:50]}...")
                            
                            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                            try:
                                latest_user_message_time = datetime.fromisoformat(
                                    latest_msg.get("created_time", "").replace('Z', '+00:00')
                                )
                            except:
                                latest_user_message_time = datetime.now()
                        
                        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ user
                        user_name = participant.get("name")
                        if not user_name:
                            user_info = fb_get(participant_id, {"fields": "name,first_name,last_name"}, access_token)
                            user_name = user_info.get("name", f"User...{participant_id[-8:]}")
                        
                        if not existing_customer:
                            # User ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                            logger.info(f"üÜï ‡∏û‡∏ö User ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {user_name} ({participant_id})")
                            
                            # ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å
                            first_interaction = latest_user_message_time or datetime.now()
                            if user_messages:
                                # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î
                                first_msg = user_messages[-1]
                                try:
                                    first_interaction = datetime.fromisoformat(
                                        first_msg.get("created_time", "").replace('Z', '+00:00')
                                    )
                                except:
                                    pass
                            
                            customer_data = {
                                'name': user_name,
                                'first_interaction_at': first_interaction,
                                'last_interaction_at': latest_user_message_time or datetime.now(),
                                'source_type': 'new'
                            }
                            
                            crud.create_or_update_customer(db, page.ID, participant_id, customer_data)
                            restored_count += 1  # ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
                            logger.info(f"‚úÖ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô/‡∏™‡∏£‡πâ‡∏≤‡∏á User: {user_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                            
                        elif has_new_message and latest_user_message_time:
                            # ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó last_interaction_at
                            if existing_customer.last_interaction_at is None or latest_user_message_time > existing_customer.last_interaction_at:
                                logger.info(f"üìù ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó last_interaction_at ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {existing_customer.name}")
                                
                                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                                existing_customer.last_interaction_at = latest_user_message_time
                                existing_customer.updated_at = datetime.now()
                                db.commit()
                                db.refresh(existing_customer)
                                updated_count += 1
                        
                        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                        for msg in messages:
                            msg_id = msg.get("id")
                            if msg_id:
                                self.seen_messages[convo_id].add(msg_id)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÉ‡∏ô Facebook
            logger.info(f"üìä ‡∏û‡∏ö PSIDs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(found_psids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å Facebook")
            
            # Optional: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Facebook
            all_customers = db.query(crud.models.FbCustomer).filter(
                crud.models.FbCustomer.page_id == page.ID
            ).all()
            
            db_psids = {customer.customer_psid for customer in all_customers}
            missing_in_fb = db_psids - found_psids
            
            if missing_in_fb:
                logger.warning(f"‚ö†Ô∏è ‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô DB ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Facebook: {len(missing_in_fb)} ‡∏£‡∏≤‡∏¢")
                for psid in list(missing_in_fb)[:5]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏£‡∏≤‡∏¢‡πÅ‡∏£‡∏Å
                    customer = next((c for c in all_customers if c.customer_psid == psid), None)
                    if customer:
                        logger.warning(f"   - {customer.name} ({psid})")
            
            if restored_count > 0 or updated_count > 0:
                logger.info(f"‚úÖ Sync ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà {restored_count} ‡∏Ñ‡∏ô, ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó {updated_count} ‡∏Ñ‡∏ô")
            else:
                logger.info(f"‚úÖ Sync ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
                
        except Exception as e:
            logger.error(f"‚ùå Error syncing page {page_id}: {e}")
            import traceback
            logger.error(traceback.format_exc())
        finally:
            db.close()
            
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö auto sync"""
        self.is_running = False
        logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö Auto Sync")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance
auto_sync_service = AutoSyncService()