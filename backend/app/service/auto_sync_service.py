import asyncio
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Set, Optional
from app.database import crud, models
from app.database.database import SessionLocal
from app.service.facebook_api import fb_get
import pytz

logger = logging.getLogger(__name__)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timezone
bangkok_tz = pytz.timezone('Asia/Bangkok')
utc_tz = pytz.UTC

class AutoSyncService:
    def __init__(self):
        self.is_running = False
        self.sync_interval = 15  # üî• ‡∏•‡∏î‡∏à‡∏≤‡∏Å 30 ‡πÄ‡∏õ‡πá‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.page_tokens = {}
        
        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversation ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        self.conversation_cache: Dict[str, Dict] = {}
        
        # ‡πÄ‡∏Å‡πá‡∏ö track ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà sync ‡πÅ‡∏ï‡πà‡∏•‡∏∞ conversation
        self.last_sync_times: Dict[str, datetime] = {}
        
        # ‡πÄ‡∏Å‡πá‡∏ö message ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ user
        self.last_seen_messages: Dict[str, str] = {}
        
        # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏Ç‡∏≠‡∏á last_interaction_at ‡πÅ‡∏ï‡πà‡∏•‡∏∞ user
        self.user_last_interaction_cache: Dict[str, datetime] = {}
        
        # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°: Queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch update
        self.update_queue: List[Dict] = []
        self.queue_lock = asyncio.Lock()
        
    def set_page_tokens(self, tokens: Dict[str, str]):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó page tokens"""
        self.page_tokens = tokens
        logger.info(f"üìå Updated page tokens for {len(tokens)} pages")
     
    def make_datetime_aware(self, dt: Optional[datetime]) -> Optional[datetime]:
        """‡πÅ‡∏õ‡∏•‡∏á datetime ‡πÉ‡∏´‡πâ‡∏°‡∏µ timezone"""
        if dt is None:
            return None
        
        if dt.tzinfo is not None:
            return dt.astimezone(utc_tz)
        
        try:
            return bangkok_tz.localize(dt).astimezone(utc_tz)
        except:
            return dt.replace(tzinfo=bangkok_tz).astimezone(utc_tz)
    
    def parse_facebook_time(self, time_str: str) -> Optional[datetime]:
        """‡πÅ‡∏õ‡∏•‡∏á Facebook timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime with timezone"""
        if not time_str:
            return None
        
        try:
            if time_str.endswith('Z'):
                time_str = time_str[:-1] + '+00:00'
            elif '+' in time_str and ':' not in time_str[-6:]:
                time_str = time_str[:-2] + ':' + time_str[-2:]
            
            dt = datetime.fromisoformat(time_str)
            
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=utc_tz)
            
            return dt
            
        except Exception as e:
            logger.error(f"Error parsing time {time_str}: {e}")
            return None
   
    async def start_auto_sync(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö auto sync"""
        self.is_running = True
        logger.info(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Auto Sync - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Facebook ‡∏ó‡∏∏‡∏Å {self.sync_interval} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        # üî• ‡πÄ‡∏£‡∏¥‡πà‡∏° background task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch update
        batch_update_task = asyncio.create_task(self.process_update_queue())
        
        try:
            while self.is_running:
                try:
                    await self.sync_all_pages()
                    await asyncio.sleep(self.sync_interval)
                except Exception as e:
                    logger.error(f"‚ùå Error in auto sync: {e}")
                    await asyncio.sleep(30)
        finally:
            # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å batch update task ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î
            batch_update_task.cancel()
            try:
                await batch_update_task
            except asyncio.CancelledError:
                pass
    
    async def process_update_queue(self):
        """üî• ‡πÉ‡∏´‡∏°‡πà: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• update queue ‡πÅ‡∏ö‡∏ö batch"""
        while self.is_running:
            try:
                await asyncio.sleep(5)  # ‡∏£‡∏ß‡∏° update ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
                async with self.queue_lock:
                    if not self.update_queue:
                        continue
                    
                    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° updates ‡∏ï‡∏≤‡∏° page_id
                    updates_by_page: Dict[int, List[Dict]] = {}
                    for update in self.update_queue:
                        page_id = update['page_id']
                        if page_id not in updates_by_page:
                            updates_by_page[page_id] = []
                        updates_by_page[page_id].append(update)
                    
                    # ‡∏•‡πâ‡∏≤‡∏á queue
                    self.update_queue.clear()
                
                # ‡∏ó‡∏≥ batch update ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ page
                for page_id, updates in updates_by_page.items():
                    await self.batch_update_customers(page_id, updates)
                    
            except Exception as e:
                logger.error(f"Error processing update queue: {e}")
    
    async def batch_update_customers(self, page_db_id: int, updates: List[Dict]):
        """üî• ‡πÉ‡∏´‡∏°‡πà: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó customers ‡πÅ‡∏ö‡∏ö batch"""
        db = SessionLocal()
        try:
            for update in updates:
                psid = update['psid']
                customer = crud.get_customer_by_psid(db, page_db_id, psid)
                
                if customer:
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                    needs_update = False
                    
                    if 'last_interaction_at' in update:
                        new_time = update['last_interaction_at']
                        if customer.last_interaction_at != new_time:
                            customer.last_interaction_at = new_time.replace(tzinfo=None)
                            needs_update = True
                    
                    if needs_update:
                        customer.updated_at = datetime.utcnow()
            
            # Commit ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            db.commit()
            logger.info(f"‚úÖ Batch updated {len(updates)} customers for page {page_db_id}")
            
        except Exception as e:
            logger.error(f"Error in batch update: {e}")
            db.rollback()
        finally:
            db.close()
    
    async def sync_all_pages(self):
        """Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏à"""
        tasks = []
        for page_id, access_token in self.page_tokens.items():
            task = asyncio.create_task(
                self.sync_page_conversations(page_id, access_token)
            )
            tasks.append(task)
        
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
    
    async def sync_page_conversations(self, page_id: str, access_token: str):
        """Sync conversations ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô"""
        
        db = SessionLocal()
        try:
            page = crud.get_page_by_page_id(db, page_id)
            if not page:
                return
            
            installed_at = page.created_at or datetime.now(utc_tz)
            if installed_at.tzinfo is None:
                installed_at = bangkok_tz.localize(installed_at).astimezone(utc_tz)
            else:
                installed_at = installed_at.astimezone(utc_tz)
            
            # üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
            cache_key = f"conv_{page_id}"
            last_check = self.last_sync_times.get(cache_key)
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á check ‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ cache
            if last_check and (datetime.now(utc_tz) - last_check).total_seconds() < 10:
                # ‡πÉ‡∏ä‡πâ quick check ‡πÅ‡∏ó‡∏ô
                await self.quick_check_updates(page, page_id, access_token, installed_at, db)
                return
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà check
            self.last_sync_times[cache_key] = datetime.now(utc_tz)
            
            # ‡∏î‡∏∂‡∏á conversations ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
            endpoint = f"{page_id}/conversations"
            params = {
                "fields": "participants,updated_time,id,messages.limit(10){created_time,from,message,id}",
                "limit": 50
            }
            
            result = fb_get(endpoint, params, access_token)
            
            if "error" in result:
                logger.error(f"‚ùå Error getting conversations: {result['error']}")
                return
                
            conversations = result.get("data", [])
            
            # üî• ‡πÄ‡∏Å‡πá‡∏ö cache
            self.conversation_cache[page_id] = {
                'data': conversations,
                'timestamp': datetime.now(utc_tz)
            }
            
            updated_count = 0
            new_count = 0
            status_updated_count = 0
            
            for convo in conversations:
                convo_id = convo.get("id")
                participants = convo.get("participants", {}).get("data", [])
                messages = convo.get("messages", {}).get("data", [])
                
                for participant in participants:
                    participant_id = participant.get("id")
                    if participant_id and participant_id != page_id:
                        existing_customer = crud.get_customer_by_psid(db, page.ID, participant_id)
                        
                        # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user
                        latest_user_message = None
                        latest_user_message_time = None
                        
                        for msg in messages:
                            if msg.get("from", {}).get("id") == participant_id:
                                latest_user_message = msg
                                break
                        
                        if latest_user_message:
                            msg_id = latest_user_message.get("id")
                            msg_time = latest_user_message.get("created_time")
                            
                            latest_user_message_time = self.parse_facebook_time(msg_time)
                            if not latest_user_message_time:
                                latest_user_message_time = datetime.now(utc_tz)
                            
                            # üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å cache ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            cached_time = self.user_last_interaction_cache.get(participant_id)
                            is_new_message = False
                            
                            if msg_id:
                                last_seen_id = self.last_seen_messages.get(participant_id)
                                if msg_id != last_seen_id:
                                    is_new_message = True
                                    self.last_seen_messages[participant_id] = msg_id
                                    
                                    # üî• ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó cache ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                                    self.user_last_interaction_cache[participant_id] = latest_user_message_time
                                    
                                    logger.info(f"üí¨ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å {participant_id}")
                            
                            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ cached_time ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö latest_user_message_time
                            if is_new_message or (cached_time and cached_time < latest_user_message_time):
                                
                                # =========== User ‡πÉ‡∏´‡∏°‡πà ===========
                                if not existing_customer:
                                    user_name = participant.get("name")
                                    if not user_name:
                                        user_info = fb_get(participant_id, {"fields": "name,profile_pic"}, access_token)
                                        user_name = user_info.get("name", f"User...{participant_id[-8:]}")
                                        profile_pic = user_info.get("profile_pic", "")
                                    else:
                                        profile_pic = ""
                                    
                                    logger.info(f"üÜï ‡∏û‡∏ö User ‡πÉ‡∏´‡∏°‡πà: {user_name} ({participant_id})")
                                    
                                    first_interaction = await self.get_first_message_time(
                                        convo_id, participant_id, access_token
                                    )
                                    
                                    if not first_interaction:
                                        first_interaction = latest_user_message_time
                                    
                                    source_type = 'new' if first_interaction >= installed_at else 'imported'
                                    
                                    customer_data = {
                                        'name': user_name,
                                        'profile_pic': profile_pic,
                                        'first_interaction_at': first_interaction,
                                        'last_interaction_at': latest_user_message_time,
                                        'source_type': source_type
                                    }
                                    
                                    new_customer = crud.create_or_update_customer(db, page.ID, participant_id, customer_data)
                                    new_count += 1
                                    
                                    if new_customer:
                                        db.query(models.FBCustomerMiningStatus).filter(
                                            models.FBCustomerMiningStatus.customer_id == new_customer.id
                                        ).delete()
                                        
                                        initial_mining_status = models.FBCustomerMiningStatus(
                                            customer_id=new_customer.id,
                                            status="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∏‡∏î",
                                            note=f"New user added at {datetime.now()}"
                                        )
                                        db.add(initial_mining_status)
                                        db.commit()
                                    
                                    # ‡∏™‡πà‡∏á SSE
                                    try:
                                        from app.routes.facebook.sse import customer_type_update_queue
                                        
                                        update_data = {
                                            'page_id': page_id,
                                            'psid': participant_id,
                                            'name': user_name,
                                            'action': 'new',
                                            'timestamp': datetime.now().isoformat(),
                                            'profile_pic': profile_pic,
                                            'mining_status': '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∏‡∏î',
                                            'source_type': source_type
                                        }
                                        
                                        await customer_type_update_queue.put(update_data)
                                        logger.info(f"üì° Sent SSE new user notification: {user_name} ({source_type})")
                                        
                                    except Exception as e:
                                        logger.error(f"Error sending SSE for new user: {e}")
                                
                                # =========== User ‡πÄ‡∏î‡∏¥‡∏° ===========
                                else:
                                    existing_last_interaction = self.make_datetime_aware(existing_customer.last_interaction_at)
                                    
                                    if existing_last_interaction is None or latest_user_message_time > existing_last_interaction:
                                        logger.info(f"üìù ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó last_interaction_at ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {existing_customer.name}")
                                        
                                        # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ queue ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ update ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                                        async with self.queue_lock:
                                            self.update_queue.append({
                                                'page_id': page.ID,
                                                'psid': participant_id,
                                                'last_interaction_at': latest_user_message_time
                                            })
                                        
                                        updated_count += 1
                                        
                                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î
                                        current_mining_status = db.query(models.FBCustomerMiningStatus).filter(
                                            models.FBCustomerMiningStatus.customer_id == existing_customer.id
                                        ).order_by(models.FBCustomerMiningStatus.created_at.desc()).first()
                                        
                                        if current_mining_status and current_mining_status.status == "‡∏Ç‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß":
                                            db.query(models.FBCustomerMiningStatus).filter(
                                                models.FBCustomerMiningStatus.customer_id == existing_customer.id
                                            ).delete()
                                            
                                            new_status = models.FBCustomerMiningStatus(
                                                customer_id=existing_customer.id,
                                                status="‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö",
                                                note=f"User replied via auto-sync at {datetime.now()}"
                                            )
                                            db.add(new_status)
                                            db.commit()
                                            status_updated_count += 1
                                            logger.info(f"üí¨ ‚úÖ Updated mining status to '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö' for: {existing_customer.name}")
                                            
                                            # ‡∏™‡πà‡∏á SSE
                                            try:
                                                from app.routes.facebook.sse import customer_type_update_queue
                                                
                                                update_data = {
                                                    'page_id': page_id,
                                                    'psid': participant_id,
                                                    'name': existing_customer.name,
                                                    'mining_status': '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö',
                                                    'action': 'mining_status_update',
                                                    'timestamp': datetime.now().isoformat()
                                                }
                                                
                                                await customer_type_update_queue.put(update_data)
                                                logger.info(f"üì° Sent SSE mining status update for: {existing_customer.name}")
                                                
                                            except Exception as e:
                                                logger.error(f"Error sending SSE mining status update: {e}")
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
            if new_count > 0 or updated_count > 0 or status_updated_count > 0:
                if new_count > 0:
                    logger.info(f"   - User ‡πÉ‡∏´‡∏°‡πà: {new_count} ‡∏Ñ‡∏ô")
                if updated_count > 0:
                    logger.info(f"   - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó interaction: {updated_count} ‡∏Ñ‡∏ô")
                if status_updated_count > 0:
                    logger.info(f"   - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î: {status_updated_count} ‡∏Ñ‡∏ô")
                    
        except Exception as e:
            logger.error(f"‚ùå Error syncing page {page_id}: {e}")
            import traceback
            logger.error(traceback.format_exc())
            db.rollback()
        finally:
            db.close()
    
    async def quick_check_updates(self, page, page_id: str, access_token: str, 
                                  installed_at: datetime, db):
        """üî• ‡πÉ‡∏´‡∏°‡πà: Quick check ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updates ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        try:
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ conversations ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
            one_minute_ago = datetime.now(utc_tz) - timedelta(minutes=1)
            
            endpoint = f"{page_id}/conversations"
            params = {
                "fields": "participants,updated_time,id,messages.limit(5){created_time,from,id}",
                "limit": 20  # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏á
            }
            
            result = fb_get(endpoint, params, access_token)
            if "error" in result:
                return
            
            conversations = result.get("data", [])
            
            for convo in conversations:
                updated_time = self.parse_facebook_time(convo.get("updated_time"))
                if not updated_time or updated_time < one_minute_ago:
                    continue
                
                participants = convo.get("participants", {}).get("data", [])
                messages = convo.get("messages", {}).get("data", [])
                
                for participant in participants:
                    participant_id = participant.get("id")
                    if participant_id and participant_id != page_id:
                        
                        # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                        for msg in messages:
                            if msg.get("from", {}).get("id") == participant_id:
                                msg_id = msg.get("id")
                                
                                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                                last_seen_id = self.last_seen_messages.get(participant_id)
                                if msg_id != last_seen_id:
                                    self.last_seen_messages[participant_id] = msg_id
                                    
                                    msg_time = self.parse_facebook_time(msg.get("created_time"))
                                    if msg_time:
                                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ queue
                                        async with self.queue_lock:
                                            self.update_queue.append({
                                                'page_id': page.ID,
                                                'psid': participant_id,
                                                'last_interaction_at': msg_time
                                            })
                                        
                                        logger.info(f"‚ö° Quick update: {participant_id}")
                                
                                break
                                
        except Exception as e:
            logger.error(f"Error in quick check: {e}")
    
    async def get_first_message_time(self, conversation_id: str, user_id: str, access_token: str) -> Optional[datetime]:
        """‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á user"""
        try:
            endpoint = f"{conversation_id}/messages"
            params = {
                "fields": "created_time,from",
                "limit": 100,
                "order": "chronological"
            }
            
            result = fb_get(endpoint, params, access_token)
            
            if "data" in result:
                for msg in result["data"]:
                    if msg.get("from", {}).get("id") == user_id:
                        time_str = msg.get("created_time")
                        if time_str:
                            return self.parse_facebook_time(time_str)
            
            return None
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Error getting first message time: {e}")
            return None
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö auto sync"""
        self.is_running = False
        logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö Auto Sync")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance
auto_sync_service = AutoSyncService()